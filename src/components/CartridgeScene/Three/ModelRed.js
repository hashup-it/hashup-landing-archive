/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useThree } from '@react-three/fiber'
import { PMREMGenerator, UnsignedByteType } from 'three'
import { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader'

export default function Model({ ...props }) {
    const { gl, scene } = useThree()
    const pmremGenerator = new PMREMGenerator(gl)
    const loader = new RGBELoader()
    loader.setDataType(UnsignedByteType)
    pmremGenerator.compileEquirectangularShader()

    useEffect(() => {
        loader.load('/assets/models/light-map.hdr', texture => {
            scene.environment = pmremGenerator.fromEquirectangular(texture).texture

            texture.dispose()
            pmremGenerator.dispose()
        })
    }, [scene, loader, pmremGenerator])

    const group = useRef()
    const { nodes, materials } = useGLTF('/assets/models/red/cartridge czerwony.gltf')
    return (
        <group ref={group} {...props} dispose={null}>
            <group position={[-0.41, 1.64, -0.03]} rotation={[Math.PI / 2, 0, 0]}>
                <mesh geometry={nodes.cartridge_1.geometry} material={materials['cartridge mat']} />
                <mesh geometry={nodes.cartridge_2.geometry} material={materials['cartridge szklo']} />
            </group>
        </group>
    )
}

useGLTF.preload('/assets/models/red/cartridge czerwony.gltf')
